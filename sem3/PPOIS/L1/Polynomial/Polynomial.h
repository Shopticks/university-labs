/**
 * @author Иван Захаренков, гр. 421702
 * @file Polynomial.h содержит объявления всех методов для класса Polynomial,
 * который представляет собой полином (многочлен) с вещественными коэффициентами.
 */

#ifndef L1_POLYNOMIAL_H
#define L1_POLYNOMIAL_H

#include <iostream>

/**
 * @class Polynomial
 * @brief Класс, предназначенный для работы с полиномами (многочленами).
 * @details Полином представляет собой выражение вида a_0 + a_1 * x^1 + ... + a_n * x^n,
 * где a_i - коэффициенты полинома. Класс поддерживает основные арифметические операции,
 * сравнение полиномов и вычисление значения полинома в заданной точке.
 */
class Polynomial {
private:
    double* coefficients;  ///< Указатель на массив коэффициентов полинома (коэффициенты хранятся от a_0 до a_n)
    size_t size; ///< Размер массива коэффициентов (степень полинома + 1)

    /**
     * @brief Проверка, является ли полином нулевым.
     * @return true, если полином является нулевым (все коэффициенты равны нулю с учетом погрешности);
     * false в противном случае
     */
    [[nodiscard]] bool isPolynomialZero() const;

    /**
     * @brief Вычисление степени полинома.
     * @return Степень полинома (индекс последнего ненулевого коэффициента) или -1 для нулевого полинома
     */
    [[nodiscard]] int calculateDegree() const;

    /**
     * @brief Удаление ведущих нулевых коэффициентов.
     * @details Метод уменьшает размер полинома, удаляя нулевые коэффициенты в старших разрядах.
     * Для нулевого полинома оставляет один коэффициент, равный нулю.
     */
    void trimLeadingZeros();

    /**
     * @brief Оптимизация коэффициентов полинома.
     * @details Метод заменяет коэффициенты, близкие к нулю (меньше EPSILON), на ноль.
     * Это помогает избежать накопления ошибок округления.
     */
    void optimizeCoefficients();

public:

    /**
    * @brief Конструктор полинома заданной степени.
    * @param degree Степень полинома
    * @param inputCoefficients Массив коэффициентов полинома (от a_0 до a_degree)
    * @details Если коэффициенты не переданы, создается полином с нулевыми коэффициентами.
    * После создания полином автоматически нормализуется.
    */
    explicit Polynomial(size_t, const double * = nullptr);

    /**
     * @brief Деструктор полинома.
     * @details Освобождает память, выделенную под массив коэффициентов.
     */
    ~Polynomial();

    /**
     * @brief Конструктор копирования полинома.
     * @param other Полином, который нужно скопировать
     */
    Polynomial(const Polynomial &);

    /**
     * @brief Нормализация полинома.
     * @details Приводит полином к каноническому виду: удаляет ведущие нулевые коэффициенты
     * и оптимизирует малые коэффициенты.
     */
    void normalize();

    /**
     * @brief Оператор сложения полиномов.
     * @param other Полином для сложения
     * @return Новый полином, представляющий собой сумму текущего полинома и переданного
     * @details Сложение выполняется поэлементно для коэффициентов одинаковой степени.
     */
    Polynomial operator+(const Polynomial &);

    /**
     * @brief Оператор присваивающего сложения.
     * @param other Полином для сложения
     * @return Ссылка на измененный текущий полином
     * @details Сложение выполняется поэлементно для коэффициентов одинаковой степени.
     */
    Polynomial& operator+=(const Polynomial &);

    /**
     * @brief Оператор вычитания полиномов.
     * @param other Полином для вычитания
     * @return Новый полином, представляющий собой разность текущего полинома и переданного
     * @details Вычитание выполняется поэлементно для коэффициентов одинаковой степени.
     */
    Polynomial operator-(const Polynomial &);

    /**
     * @brief Оператор присваивающего вычитания.
     * @param other Полином для вычитания
     * @return Ссылка на измененный текущий полином
     * @details Вычитание выполняется поэлементно для коэффициентов одинаковой степени.
     */
    Polynomial& operator-=(const Polynomial &);

    /**
     * @brief Оператор умножения полиномов.
     * @param other Полином для умножения
     * @return Новый полином, представляющий собой произведение текущего полинома и переданного
     * @details Умножение выполняется по правилу умножения многочленов.
     */
    Polynomial operator*(const Polynomial &);

    /**
     * @brief Оператор присваивающего умножения.
     * @param other Полином для умножения
     * @return Ссылка на измененный текущий полином
     * @details Умножение выполняется по правилу умножения многочленов.
     */
    Polynomial& operator*=(const Polynomial &);

    /**
     * @brief Оператор деления полиномов.
     * @param other Полином-делитель
     * @return Новый полином, представляющий собой частное от деления текущего полинома на переданный
     * @throw std::invalid_argument при попытке деления на нулевой полином
     * @details Деление выполняется по алгоритму деления многочленов "уголком".
     */
    Polynomial operator/(const Polynomial &);

    /**
     * @brief Оператор присваивающего деления.
     * @param other Полином-делитель
     * @return Ссылка на измененный текущий полином
     * @throw std::invalid_argument при попытке деления на нулевой полином
     * @details Деление выполняется по алгоритму деления многочленов "уголком".
     */
    Polynomial& operator/=(const Polynomial &);

    /**
     * @brief Оператор сравнения на равенство.
     * @param other Полином для сравнения
     * @return true, если полиномы эквивалентны (с учетом погрешности EPSILON); false в противном случае
     * @details Сравнение учитывает нормализованный вид полиномов и погрешность вычислений.
     */
    bool operator==(const Polynomial &) const;

    /**
     * @brief Оператор сравнения на неравенство.
     * @param other Полином для сравнения
     * @return true, если полиномы не эквивалентны; false в противном случае
     */
    bool operator!=(const Polynomial &) const;

    /**
     * @brief Оператор присваивания.
     * @param other Полином для копирования
     * @return Ссылка на текущий полином после присваивания
     * @details Реализует защиту от самоприсваивания и корректное управление памятью.
     */
    Polynomial& operator=(const Polynomial &);

    /**
     * @brief Оператор доступа к коэффициенту по индексу.
     * @param index Индекс коэффициента (соответствует степени x)
     * @return Значение коэффициента при x^index
     * @details Для индексов, выходящих за степень полинома, возвращается 0.
     */
    double operator[](int) const;

    /**
     * @brief Оператор вычисления значения полинома в точке.
     * @param value Точка, в которой нужно вычислить значение полинома
     * @return Значение полинома в заданной точке
     * @details Вычисление выполняется по схеме Горнера для повышения точности.
     */
    double operator()(double) const;

    /**
     * @brief Оператор вывода полинома в поток.
     * @param out Поток вывода
     * @param p Полином для вывода
     * @return Ссылка на поток вывода после записи данных
     * @details Форматирует вывод в виде "Polynomial of degree N with coefficients: [a_0, a_1, ..., a_N]"
     */
    friend std::ostream &operator<<(std::ostream &, const Polynomial &);

    /**
     * @brief Оператор ввода полинома из потока.
     * @param in Поток ввода
     * @param p Полином для заполнения данными
     * @return Ссылка на поток ввода после чтения данных
     * @details Ожидает на вход степень полинома и затем коэффициенты от a_0 до a_degree
     */
    friend std::istream &operator>>(std::istream &, Polynomial &);
};


#endif //L1_POLYNOMIAL_H